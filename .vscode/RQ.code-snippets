{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Custom react query hook": {
    "prefix": "rqk",
    "body": [
      "import {useQuery, useMutation, useQueryClient} from '@tanstack/react-query';",
      "import {toast} from 'react-toastify';",
      "import {apiClient} from '~/apiClient';",

      "interface $1 {};",

      "interface $1Base {",
      "path: string;",
      "data?: any;",
      "}",

      "interface $1Post extends $1Base {",
      "data: {};",
      "}",

      "interface $1Put extends $1Base {",
      "data: {};",
      "}",

      "export const $2PostOptions = {",
      "mutationKey: ['$2_post'],",
      "mutationFn: async (mutation_data: $1Post) => {",
      "const {data} = mutation_data;",
      "const {data: result} = await apiClient.post(`/`, data); $BLOCK_COMMENT_START Write the url for the endpoint  $BLOCK_COMMENT_END",
      "return result;",
      "},",
      "};",

      "export const $2PutOptions = {",
      "mutationKey: ['$2_put'],",
      "mutationFn: async (mutation_data: $1Put) => {",
      "const {path, data} = mutation_data;",
      "console.log('path', path, 'data', data);",
      "const {data: result} = await apiClient.put(`//\\${path}`, data); $BLOCK_COMMENT_START Write the url for the endpoint  $BLOCK_COMMENT_END",
      "return result;",
      "},",
      "};",

      "export const $2DelOptions = {",
      "mutationKey: ['$2_del'],",
      "mutationFn: async (mutation_data: $1Base) => {",
      "const {path} = mutation_data;",
      "const {data: result} = await apiClient.delete(`//\\${path}`); $BLOCK_COMMENT_START Write the url for the endpoint  $BLOCK_COMMENT_END",
      "return result;",
      "},",
      "};",

      "export const use$1 = () => {",
      "const queryClient = useQueryClient();",

      "const get = useQuery({",
      "queryKey: ['$2'],",
      "queryFn: async () => {",
      "const {data} = await apiClient.get<Array<$1>>(`/`); $BLOCK_COMMENT_START Write the url for the endpoint  $BLOCK_COMMENT_END",
      "return data;",
      "},",
      "});",

      "const post = useMutation({",
      "...$2PostOptions,",
      "onSuccess: () => {",
      "queryClient.invalidateQueries({",
      "queryKey: ['$2'],",
      "});",
      "toast.success('$3 gemt');",
      " },",
      "});",

      "const put = useMutation({",
      "...$2PutOptions,",
      "onSuccess: () => {",
      "queryClient.invalidateQueries({",
      "queryKey: ['$2'],",
      "});",
      "toast.success('$3 Ã¦ndret');",
      "},",
      "});",

      "const del = useMutation({",
      "...$2DelOptions,",
      "onSuccess: () => {",
      "queryClient.invalidateQueries({",
      "queryKey: ['$2'],",
      "});",
      "toast.success('$3 slettet');",
      "},",
      "});",

      "return {get, post, put, del};",
      "};",
    ],
  },
}
